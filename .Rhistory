plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(4,4,1,1)+0.1)
matplot(Functions, type="l", col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)" )
cx = 2
mars = c(2,2,1,1)+0.1
layout(matrix(c(1, 2, 3, 11, 10, 4, 5,11, 8, 9, 6, 11, 7, 7, 7,7), 4, 4), heights = c(1,1,1,0.2), widths=c(1,1,1,3))
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[1], cex=cx)
par(mar=mars)
plot(DOE[,c(1,2)])
par(mar=mars)
plot(DOE[,c(1,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[2], cex=cx)
par(mar=mars)
plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(4,4,1,1)+0.1)
matplot(Functions, type="l", col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)" )
cx = 2
mars = c(2,2,1,1)+0.1
layout(matrix(c(1, 2, 3, 11, 10, 4, 5,11, 8, 9, 6, 11, 7, 7, 7,7), 4, 4), heights = c(1,1,1,0.2), widths=c(1,1,1,3))
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[1], cex=cx)
par(mar=mars)
plot(DOE[,c(1,2)])
par(mar=mars)
plot(DOE[,c(1,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[2], cex=cx)
par(mar=mars)
plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(4,4,4,1)+0.1)
matplot(Functions, type="l", col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)" main = "Functions")
cx = 2
mars = c(2,2,1,1)+0.1
layout(matrix(c(1, 2, 3, 11, 10, 4, 5,11, 8, 9, 6, 11, 7, 7, 7,7), 4, 4), heights = c(1,1,1,0.2), widths=c(1,1,1,3))
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[1], cex=cx)
par(mar=mars)
plot(DOE[,c(1,2)])
par(mar=mars)
plot(DOE[,c(1,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[2], cex=cx)
par(mar=mars)
plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(4,4,4,1)+0.1)
matplot(Functions, type="l", col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)", main = "Functions")
cx = 2
mars = c(2,2,1,1)+0.1
layout(matrix(c(1, 2, 3, 11, 10, 4, 5,11, 8, 9, 6, 11, 7, 7, 7,7), 4, 4), heights = c(1,1,1,0.2), widths=c(1,1,1,3))
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[1], cex=cx)
par(mar=mars)
plot(DOE[,c(1,2)])
par(mar=mars)
plot(DOE[,c(1,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[2], cex=cx)
par(mar=mars)
plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(5,4,4,1)+0.1)
matplot(Functions, type="l", col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)", main = "Functions")
cx = 2
mars = c(2,2,1,1)+0.1
layout(matrix(c(1, 2, 3, 11, 10, 4, 5,11, 8, 9, 6, 11, 7, 7, 7,7), 4, 4), heights = c(1,1,1,0.2), widths=c(1,1,1,3))
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[1], cex=cx)
par(mar=mars)
plot(DOE[,c(1,2)])
par(mar=mars)
plot(DOE[,c(1,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[2], cex=cx)
par(mar=mars)
plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(5,4,4,1)+0.1)
matplot(Functions, type="l", lwd=1, lty=1, col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)", main = "Functions")
help(plotVariogram)
str(g,1)
basis <- create.bspline.basis(c(0,750))
library(fda)
basis <- create.bspline.basis(c(0,750))
plot(basis)
plot(basis)
basis <- create.bspline.basis(c(0,750), 30, 4)
plot(basis)
expandedFunctions <- smooth.basis(1:750, Functions[,train], basis)
basis <- create.bspline.basis(c(1,750), 30, 4)
plot(basis)
expandedFunctions <- smooth.basis(1:750, Functions[,train], basis)
expandedFunctions <- smooth.basis(1:750, as.matrix(Functions[,train]), basis)
plot(expandedFunctions)
expandedFunctions.pca <- pca.fd(expandedFunctions, 3)
expandedFunctions.pca <- pca.fd(expandedFunctions$fd, 3)
plot(expandedFunctions.pca)
MEAN <- eval.fd(1:750, expandedFunctions.pca$meanfd)
FPCS <- eval.fd(1:750, expandedfunctions.pca$harmonics)
MEAN <- eval.fd(1:750, expandedFunctions.pca$meanfd)
FPCS <- eval.fd(1:750, expandedFunctions.pca$harmonics)
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], expandedFunctions.pca$scores[,1], scalar=TRUE)
basis <- create.bspline.basis(c(1,750), 30, 4)
expandedFunctions <- smooth.basis(1:750, as.matrix(Functions[,train]), basis)
expandedFunctions.pca <- pca.fd(expandedFunctions$fd, 2)
expandedFunctions.pca$scores <- as.data.frame(expandedFunctions.pca$scores)
MEAN <- eval.fd(1:750, expandedFunctions.pca$meanfd)
FPCS <- eval.fd(1:750, expandedFunctions.pca$harmonics)
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], expandedFunctions.pca$scores[,1], scalar=TRUE)
expandedFunctions.pca$scores[,1]
basis <- create.bspline.basis(c(1,750), 30, 4)
expandedFunctions <- smooth.basis(1:750, as.matrix(Functions[,train]), basis)
expandedFunctions.pca <- pca.fd(expandedFunctions$fd, 2)
MEAN <- eval.fd(1:750, expandedFunctions.pca$meanfd)
FPCS <- eval.fd(1:750, expandedFunctions.pca$harmonics)
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], as.data.frame(expandedFunctions.pca$scores[,1]), scalar=TRUE)
g$data$FPWR_pc1$functions
SCORES.pc1 <- expandedFunctions.pca$scores[,1]
SCORES.pc2 <- expandedFunctions.pca$scores[,2]
SCORES.pc1
as.data.frame(SCORES.pc1)
FPWR_pc1 <- expandedFunctions.pca$scores[,1]
FPWR_pc2 <- expandedFunctions.pca$scores[,2]
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(g, 'FPWR_pc2', DOE[train,], as.data.frame(FPWR_pc2), scalar=TRUE)
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, comments=FALSE)
plotVariogram(g)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual =TRUE, comments=FALSE)
plotVariogram(g)
FPWR_pc1 <- expandedFunctions.pca$scores[,1]/sd( expandedFunctions.pca$scores[,1])
FPWR_pc2 <- expandedFunctions.pca$scores[,2]/sd( expandedFunctions.pca$scores[,2])
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(g, 'FPWR_pc2', DOE[train,], as.data.frame(FPWR_pc2), scalar=TRUE)
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual =TRUE, comments=FALSE)
plotVariogram(g)
FPWR_pc1 <- (expandedFunctions.pca$scores[,1]-mean( expandedFunctions.pca$scores[,1]))/sd( expandedFunctions.pca$scores[,1])
FPWR_pc2 <- (expandedFunctions.pca$scores[,2]-mean( expandedFunctions.pca$scores[,2]))/sd( expandedFunctions.pca$scores[,2])
g <- fstat(NULL, 'FPWR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(g, 'FPWR_pc2', DOE[train,], as.data.frame(FPWR_pc2), scalar=TRUE)
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual =TRUE, comments=FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.6, 0))
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.6, 0), posNugget = FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Sph", 0.6, 0), posNugget = FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Sph", 0.6, 0), posNugget = TRUE)
g <- fitVariograms(g, model = vgm(0.3, "Sph", 0.6, 0))
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.6, 0))
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0))
plotVariogram(g)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1,
useResidual =TRUE, comments=FALSE, crossMode = "pseudo")
plotVariogram(g)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1,
useResidual =TRUE, comments=FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0))
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.1, "Gau", 0.75, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.1, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.75, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.65, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.5, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.05, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.7, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Sph", 0.5, 0), forceNugget = TRUE)
g <- fitVariograms(g, model = vgm(0.15, "Sph", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.15, "Sph", 0.5, 0), forceNugget = FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Sph", 0.5, 0), forceNugget = TRUE)
g <- fitVariograms(g, model = vgm(0.15, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.025, "Gau", 0.5, 0), forceNugget = TRUE)
plotVariogram(g)
solve(matrix(c(0.3, -0.08, -0.08, 0.125), 2, 2))
g$model$omni$FPWR_pc1$psill
g$model$omni$FPWR_pc1$psill <- c(0, 0.125)
g$model$omni$FPWR_pc2$psill <- c(0, 0.3)
plotVariogram(g)
g$model$omni$FPWR_pc2
g <- fitVariograms(g, model = vgm(-0.025, "Gau", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(-0.15, "Gau", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- addCovariance(g, 'omni')
g <- fstat(NULL, 'FWPR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(g, 'FWPR_pc2', DOE[train,], as.data.frame(FPWR_pc2), scalar=TRUE)
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1,
useResidual =TRUE, comments=FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- addCovariance(g, 'omni')
forecast.pc1 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc1", .type = "UCoK")
forecast.pc1 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc1", .type = "UcoK")
forecast.pc2 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc2", .type = "UcoK")
sd1 <- expandedFunctions.pca$scores[,1]
mn1 <- mean( expandedFunctions.pca$scores[,1]
sd2 <- expandedFunctions.pca$scores[,2]
mn2 <- mean( expandedFunctions.pca$scores[,2]
FPWR_pc1 <- (expandedFunctions.pca$scores[,1] - mn1))/sd1
FPWR_pc2 <- (expandedFunctions.pca$scores[,2] - mn2))/sd2
sd1 <- expandedFunctions.pca$scores[,1]
mn1 <- mean( expandedFunctions.pca$scores[,1]
sd2 <- expandedFunctions.pca$scores[,2]
mn2 <- mean( expandedFunctions.pca$scores[,2]
FPWR_pc1 <- (expandedFunctions.pca$scores[,1] - mn1))/sd1
FPWR_pc2 <- (expandedFunctions.pca$scores[,2] - mn2))/sd2
sd1 <- sd(expandedFunctions.pca$scores[,1])
mn1 <- mean( expandedFunctions.pca$scores[,1])
sd2 <- sd(expandedFunctions.pca$scores[,2])
mn2 <- mean( expandedFunctions.pca$scores[,2])
FPWR_pc1 <- (expandedFunctions.pca$scores[,1] - mn1))/sd1
FPWR_pc2 <- (expandedFunctions.pca$scores[,2] - mn2))/sd2
sd1 <- sd(expandedFunctions.pca$scores[,1])
mn1 <- mean( expandedFunctions.pca$scores[,1])
sd2 <- sd(expandedFunctions.pca$scores[,2])
mn2 <- mean( expandedFunctions.pca$scores[,2])
FPWR_pc1 <- (expandedFunctions.pca$scores[,1] - mn1)/sd1
FPWR_pc2 <- (expandedFunctions.pca$scores[,2] - mn2)/sd2
g <- fstat(NULL, 'FWPR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(g, 'FWPR_pc2', DOE[train,], as.data.frame(FPWR_pc2), scalar=TRUE)
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1,
useResidual =TRUE, comments=FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- addCovariance(g, 'omni')
forecast.pc1 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc1", .type = "UcoK")
forecast.pc2 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc2", .type = "UcoK")
forecast.pc1$Forecast <- (forecast.pc1$Forecast * sd1) + mn1
forecast.pc2$Forecast <- (forecast.pc2$Forecast * sd2) + mn2
forecast <- NULL
for(i in 1:(nrow(DOE[-train]))){
forecast <- rbind(forecast, MEAN + c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i]) %*% FPCS)
}
c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])
FPCS
forecast <- rbind(forecast, MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i]))
matplot(forecast)
matplot(forecast, type = "l")
forecast <- NULL
for(i in 1:(nrow(DOE[-train]))){
forecast <- rbind(forecast, MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i]))
}
matplot(t(forecast), type="l")
dim(forecast)
MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])
MEAN
FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])
c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])
i
dim(forecast.pc1$Forecast)
# Construct functions:
forecast <- NULL
for(i in 1:length(forecast.pc1$Forecast)){
forecast <- rbind(forecast, MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i]))
}
matplot(t(forecast), type="l")
MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])
forecast <- NULL
for(i in 1:length(forecast.pc1$Forecast)){
forecast <- rbind(forecast, t(MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])))
}
matplot(t(forecast), type="l")
matplot(t(forecast), type="l", col="blue")
matplot(Functions[,-train], type = "l", col="red", add=TRUE)
g <- fitVariograms(g, model = vgm(0.3, "Sph", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- addCovariance(g, 'omni')
forecast.pc1 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc1", .type = "UcoK")
forecast.pc2 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc2", .type = "UcoK")
forecast.pc1$Forecast <- (forecast.pc1$Forecast * sd1) + mn1
forecast.pc2$Forecast <- (forecast.pc2$Forecast * sd2) + mn2
forecast <- NULL
for(i in 1:length(forecast.pc1$Forecast)){
forecast <- rbind(forecast, t(MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc1$Forecast[i])))
}
matplot(t(forecast), type="l", col="blue")
forecast <- NULL
for(i in 1:length(forecast.pc1$Forecast)){
forecast <- rbind(forecast, t(MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc2$Forecast[i])))
}
matplot(t(forecast), type="l", col="blue")
matplot(Functions[,-train], type = "l", col="red", add=TRUE)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.5, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- addCovariance(g, 'omni')
forecast.pc1 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc1", .type = "UcoK")
forecast.pc2 <- predictFstat(g, .newCoordinates = DOE[-train,], .what = "FWPR_pc2", .type = "UcoK")
forecast.pc1$Forecast <- (forecast.pc1$Forecast * sd1) + mn1
forecast.pc2$Forecast <- (forecast.pc2$Forecast * sd2) + mn2
forecast <- NULL
for(i in 1:length(forecast.pc1$Forecast)){
forecast <- rbind(forecast, t(MEAN + FPCS %*% c(forecast.pc1$Forecast[i], forecast.pc2$Forecast[i])))
}
matplot(t(forecast), type="l", col="blue")
matplot(Functions[,-train], type = "l", col="red", add=TRUE)
matplot(t(forecast), type="l", col="blue")
matplot(Functions[,-train], type = "l", col="red", add=TRUE)
g$model
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.4, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
g <- fitVariograms(g, model = vgm(0.3, "Gau", 0.35, 0), forceNugget = TRUE, fitRanges = FALSE)
plotVariogram(g)
data("3ParamFWPR")
set.seed(0)
train <- sample(nrow(DOE), floor(0.7*nrow(DOE)), replace = FALSE)
library(fdagstat)
g <- fstat(NULL, "FWPR", DOE[train,], Functions[,train])
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual = TRUE)
plotVariogram(g)
g <- fitVariograms(g, model=vgm(2e+09, "Gau", 0.75, 0))
plotVariogram(g)
g <- addCovariance(g, type = "omni")
g <- estimateDrift("~.", g, .type = "GLS", Intercept = TRUE)
g$model$omni$FWPR$psill <- g$model$omni$FWPR$psill/max(g$model$omni$FWPR$psill)
g <- addCovariance(g, type = "omni")
g <- estimateDrift("~.", g, .type = "GLS", Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual = TRUE)
plotVariogram(g)
g <- addCovariance(g, type = "omni")
g <- estimateDrift("~.", g, .type = "GLS", Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual = TRUE)
g <- fitVariograms(g, model=vgm(2e+09, "Gau", 0.75, 0))
plotVariogram(g)
devtools::document()
library(fdagstat)
devtools::document()
library(fdagstat)
library(fdagstat)
summary.fgstat(g)
summary(g)
devtools::document()
devtools::document()
library(fdagstat)
summary(g)
devtools::document()
library(fdagstat)
devtools::document()
devtools::document()
library(fdagstat)
print(plotVariogram(g, ggReturn = TRUE) + theme(title.text="blue"))
help(theme)
print(plotVariogram(g, ggReturn = TRUE) + theme(panel.background = "orange"))
print(plotVariogram(g, ggReturn = TRUE) + theme(panel.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + theme(panel.background = element_rect("blue")))
print(plotVariogram(g, ggReturn = TRUE) + theme(strip.background = element_rect("blue")))
print(plotVariogram(g, ggReturn = TRUE) + theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_discrete(colur=c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_discrete(colur=c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_manual(colur=c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_manual(colour=c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_manual(colour=c("black")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_manual(c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_discrete(c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_manual(values=c("black"))) +  theme(strip.background = element_rect("orange")))
print(plotVariogram(g, ggReturn = TRUE) + scale_colour_manual(values=c("black")) +  theme(strip.background = element_rect("orange")))
cat("test\n")
library(fdagstat)
library(fdagstat)
library(fda)
basis <- create.bspline.basis(c(1,750), 30, 4)
expandedFunctions <- smooth.basis(1:750, as.matrix(Functions[,train]), basis)
expandedFunctions.pca <- pca.fd(expandedFunctions$fd, 2)
MEAN <- eval.fd(1:750, expandedFunctions.pca$meanfd)
FPCS <- eval.fd(1:750, expandedFunctions.pca$harmonics)
sd1 <- sd(expandedFunctions.pca$scores[,1])
mn1 <- mean( expandedFunctions.pca$scores[,1])
sd2 <- sd(expandedFunctions.pca$scores[,2])
mn2 <- mean( expandedFunctions.pca$scores[,2])
FPWR_pc1 <- (expandedFunctions.pca$scores[,1] - mn1)/sd1
FPWR_pc2 <- (expandedFunctions.pca$scores[,2] - mn2)/sd2
g <- fstat(NULL, 'FWPR_pc1', DOE[train,], as.data.frame(FPWR_pc1), scalar=TRUE)
g <- fstat(g, 'FWPR_pc2', DOE[train,], as.data.frame(FPWR_pc2), scalar=TRUE)
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1,
useResidual = TRUE, comments=FALSE)
debug(fvariogram)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1,
useResidual = TRUE, comments=FALSE)
attr(g$data[[1]], 'isScalar')
library(fdagstat)
undebug(fvariogram)
library(fdagstat)
library(fda)
basis <- create.bspline.basis(c(1,750), 30, 4)
expandedFunctions <- smooth.basis(1:750, as.matrix(Functions[,train]), basis)
expandedFunctions.pca <- pca.fd(expandedFunctions$fd, 2)
MEAN <- eval.fd(1:750, expandedFunctions.pca$meanfd)
FPCS <- eval.fd(1:750, expandedFunctions.pca$harmonics)
percVar <- expandedFunctions.pca$values / sum(expandedFunctions.pca$values)
par(mfrow=c(1,3))
MAT = cbind(MEAN,
MEAN + sqrt(expandedFunctions.pca$values[1])*FPCS[,1],
MEAN - sqrt(expandedFunctions.pca$values[1])*FPCS[,1])
plot(MAT,type="l", lty=1, pch=c(NA, "+", "-"), col=c("black","red","blue"), xlab="Time (days)", ylab="", main = paste("First FPC: ", round(100*percVar[1],2), "%", sep=""))
MAT
plot(MAT,type="l", lty=1, pch=c(NA, "+", "-"), col=c("black","red","blue"), xlab="Time (days)", ylab="", main = paste("First FPC: ", round(100*percVar[1],2), "%", sep=""))
plot(MAT, type="l", pch=c(NA, "+", "-"), col=c("black","red","blue"), xlab="Time (days)", ylab="", main = paste("First FPC: ", round(100*percVar[1],2), "%", sep=""))
matplot(MAT)
matplot(MAT, type="l")
matplot(MAT, type="l", lty=1)
matplot(MAT, type="l", lty=1, pch=c(NA, "+", "-"), col=c("black","red","blue"))
matplot(MAT, type="l", lty=1, pch=c(1, "+", "-"), col=c("black","red","blue"))
matplot(MAT, type="p", lty=1, pch=c(1, "+", "-"), col=c("black","red","blue"))
MAT = cbind(MEAN,
MEAN + sqrt(expandedFunctions.pca$values[1])*FPCS[,1],
MEAN - sqrt(expandedFunctions.pca$values[1])*FPCS[,1])
plot(MAT, type="l", lty=1, col=c("black","red","blue"), xlab="Time (days)", ylab="", main = paste("First FPC: ", round(100*percVar[1],2), "%", sep=""))
MAT
library(fdagstat)
devtools::document()
library(fdagstat)
data("3ParamFWPR")
cx = 2
mars = c(2,2,1,1)+0.1
layout(matrix(c(1, 2, 3, 11, 10, 4, 5,11, 8, 9, 6, 11, 7, 7, 7,7), 4, 4), heights = c(1,1,1,0.2), widths=c(1,1,1,3))
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[1], cex=cx)
par(mar=mars)
plot(DOE[,c(1,2)])
par(mar=mars)
plot(DOE[,c(1,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[2], cex=cx)
par(mar=mars)
plot(DOE[,c(2,3)])
par(mar=mars)
plot(0,type='n',axes=FALSE,ann=FALSE, xlim=c(0,2), ylim=c(0,2), frame.plot=TRUE)
text(1,1,colnames(DOE)[3], cex=cx)
par(mar=c(5,4,4,1)+0.1)
matplot(Functions, type="l", lwd=1, lty=1, col="blue", xlab="Time (days)", ylab="FWPR (bbl/day)", main = "Functions")
set.seed(0)
train <- sample(nrow(DOE), floor(0.7*nrow(DOE)), replace = FALSE)
library(fdagstat)
g <- fstat(NULL, "FWPR", DOE[train,], Functions[,train])
g <- estimateDrift("~.", g, Intercept = TRUE)
g <- fvariogram("~.", g, Nlags = 100, LagMax = 1, ArgStep = 1, useResidual = TRUE)
attr(g$data[[1]], 'scalar')
attributes(g$data[[1]])
attr(g$data[[1]], 'isScalar')
devtools::document()
library(fdagstat)
library(fdagstat)
